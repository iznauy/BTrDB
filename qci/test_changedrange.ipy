
import qdf
import qdf.quasar
import sys
import random
import uuid
import time
from twisted.internet import defer, protocol, reactor
print "entered test changedrange"
EXIT_CODE = None
def setexit(code):
    global EXIT_CODE
    EXIT_CODE = code
    reactor.stop()

@defer.inlineCallbacks
def testbody(db):
    print "connected"
    TOTALPOINTS = 1000000
    PERINSERT = 1000
    INTERVAL = int(1E9/120.)
    UID = str(uuid.uuid4())
    OFFSET = random.randrange(100,1000000000000)
    randomdata = [(OFFSET + x*INTERVAL, random.random()) for x in xrange(TOTALPOINTS)]
    e_t = randomdata[-1][0]
    s_t = OFFSET
    print "SET: ", randomdata[0], randomdata[-1]
    print "e_t:", e_t
    print "s_t:", s_t
    idx = 0
    print "random data generated"
    for i in xrange(TOTALPOINTS/PERINSERT):
        yield db.insertValues(UID, randomdata[idx:idx+PERINSERT])
        idx += PERINSERT

    #immediate query
    srep = []
    (status, rv) = yield db.queryStatisticalValues(UID, 0, (1<<55), 55)
    print "status: ", status
    (version, values) = rv
    for v in values:
        srep.append([v.time, v.min, v.mean, v.max, v.count])
    print "preflush:", srep
    print "version:", version
    #preflush_count = srep[0][4]
    preflush_count = 0
    print "flushing"
    yield db.flush(UID)

    srep = []
    (status, rv) = yield db.queryStatisticalValues(UID, 0, (1<<55), 55)
    print "status: ", status
    (version, values) = rv
    for v in values:
        srep.append([v.time, v.min, v.mean, v.max, v.count])

    #postflush_count = srep[0][4]
    print "postflush:", srep
    print "version:", version

    print "flushing2"
    yield db.flush(UID)

    srep = []
    (status, rv) = yield db.queryStatisticalValues(UID, 0, (1<<55), 55)
    print "status2: ", status
    (version, values) = rv
    for v in values:
        srep.append([v.time, v.min, v.mean, v.max, v.count])

    #postflush_count = srep[0][4]
    print "postflush2:", srep
    print "version2:", version

    #print "prepost counts: ",preflush_count, postflush_count

    def expected_cr(st, et, res):
        return st & ~((1<<res)-1), (et & ~((1<<res)-1))+(1<<res)

    #changed ranges from origin
    (status, rv) = yield db.queryChangedRanges(UID, 0, 0, resolution=38)
    print "RV:", rv
    print "status: ",status
    crs = [(x.startTime, x.endTime) for x in rv[0]]
    e_crs = expected_cr(s_t, e_t, 38)
    print "crs:", [hex(x) for x in crs[0]]
    print "exp:", [hex(x) for x in e_crs]

    (status, rv) = yield db.queryChangedRanges(UID, 0, 0, resolution=8)
    print "RV:", rv
    print "status: ",status
    crs = [(x.startTime, x.endTime) for x in rv[0]]
    e_crs = expected_cr(s_t, e_t, 8)
    print "crs2:", [hex(x) for x in crs[0]]
    print "exp2:", [hex(x) for x in e_crs]

    setexit(0)
    return

def onFail(param):
    print "Encountered error: ", param
    setexit(2)

def entrypoint():
    print "in entrypoint"
    try:
        q = qdf.quasar.connectToArchiver("localhost", 4410)
        q.addCallback(testbody)
        q.addErrback(onFail)
    except Exception as e:
        print "ex: ",e
        setexit(1)

reactor.callWhenRunning(entrypoint)
reactor.run()
if EXIT_CODE == None:
    EXIT_CODE = 42
if EXIT_CODE != 0:
    sys.exit(EXIT_CODE)
else:
    !rm FAILURE
