import time

def getid():
    return int(time.time() - 1423015475)

def build_loadgen(totalrecords, numstreams, pointspermessage):
    !go get github.com/SoftwareDefinedBuildings/quasarloadgenerator
    !git clone https://github.com/SoftwareDefinedBuildings/quasarloadgenerator
    !cd quasarloadgenerator && git checkout delete-data
    !cd quasarloadgenerator && go get -d ...
    !cd quasarloadgenerator && go build -o ../loadgen .

def mkconf(cephpool, collection, filepath="/srv/quasar/"):
    if cephpool is not None:
        conf="""
[storage]
provider=ceph
cephconf=/etc/ceph/ceph.conf
cephpool={cephpool}
""".format(cephpool=cephpool)
    else:
        conf="""
[storage]
provider=file
filepath={filepath}
""".format(filepath=filepath)
    conf = conf + """
[http]
enabled=true
port=9000
address=0.0.0.0

[capnp]
enabled=true
port=4410
address=0.0.0.0

[mongo]
server=localhost
collection={collection}

[debug]
heapprofile=true
cpuprofile=true

[cache]
# Configure the RADOS and block caches. If you have a choice, rather
# spend memory on the block cache.

# This is measured in blocks, which are at most ~16K
blockcache=62500   #1 GB

# Choose a RADOS cache roughly equal to (num concurrent reads) * (object size)
# the transaction size is at most 16 MB, but is usually around 1.6MB. The
# objects can vary in size, so the cache can be capped either in quantity or
# in total size (or both)
radoscachecount=2048 #in objects
radoscachesize=256  #in MB

[coalescence]
earlytrip=16384 #readings
interval=5000 #ms
    """.format(collection=collection)
    with open("quasar.conf","w") as f:
        f.write(conf)

def wait_for_stable_ceph():
    x = !ceph -s
    while any(("creating" in y) or ("peering" in y) or ("unclean" in y) for y in x):
        print "Waiting for creation:"
        print x
        time.sleep(5)
        x = !ceph -s

def mkceph_local(cephpool):
    !ceph osd pool create $cephpool 4096 4096 replicated local 2
    time.sleep(5)
    wait_for_stable_ceph()

def mkceph_remote(cephpool):
    !ceph osd pool create $cephpool 4096 4096 replicated remote 2
    time.sleep(5)
    wait_for_stable_ceph()

def mkceph_tier(cephpool):
    cache = cephpool+"-cache"
    !ceph osd pool create $cephpool 4096 4096 replicated remote 2
    time.sleep(5)
    !ceph osd pool create $cache 4096 4096 replicated local 2
    time.sleep(5)
    wait_for_stable_ceph()
    !ceph osd tier add $cephpool $cache
    !ceph osd tier cache-mode $cache writeback
    !ceph osd tier set-overlay $cephpool $cache
    !ceph osd pool set $cache hit_set_type bloom
    !ceph osd pool set $cache hit_set_period 7200
    !ceph osd pool set $cache cache_min_flush_age 120
    wait_for_stable_ceph()

def mkceph_primary(cephpool):
    !ceph osd pool create $cephpool 4096 4096 replicated primary 2
    time.sleep(5)
    wait_for_stable_ceph()

def delceph_pool(cephpool):
    !ceph osd pool delete $cephpool $cephpool --yes-i-really-really-mean-it

def delceph_tier(cephpool):
    cache = cephpool+"-cache"
    !ceph osd tier cache-mode $cache forward
    !rados -p $cache cache-flush-evict-all > log.evict
    !ceph osd tier remove-overlay $cephpool
    !ceph osd tier remove $cephpool $cache
    delceph_pool(cache)
    delceph_pool(cephpool)

#get QDF pulled
!git clone https://github.com/SoftwareDefinedBuildings/QDF.git
!mv QDF/qdf .
