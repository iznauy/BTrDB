
import qdf
import qdf.quasar
import sys
import random
import uuid
import time
from twisted.internet import defer, protocol, reactor
print "entered test readwrite1"
EXIT_CODE = None
def setexit(code):
    global EXIT_CODE
    EXIT_CODE = code
    reactor.stop()

@defer.inlineCallbacks
def testbody(db):
    print "connected"
    TOTALPOINTS = 1000000
    PERINSERT = 1000
    INTERVAL = int(1E9/120.)
    UID = str(uuid.uuid4())
    randomdata = [(x*INTERVAL, random.random()) for x in xrange(TOTALPOINTS)]
    idx = 0
    print "random data generated"
    for i in xrange(TOTALPOINTS/PERINSERT):
        yield db.insertValues(UID, randomdata[idx:idx+PERINSERT])
        idx += PERINSERT
    time.sleep(20)
    readdata = []
    idx = 0
    print "reading data"
    for i in xrange(TOTALPOINTS/PERINSERT):
        (status, rv) = yield db.queryStandardValues(UID, i*INTERVAL*PERINSERT, (i+1)*INTERVAL*PERINSERT)
        (version, values) = rv
        readdata += [(v.time, v.value) for v in values]
    print "len readdata:",len(readdata)
    print "len insert:",len(randomdata)
    for i in xrange(len(randomdata)):
        if randomdata[i][0] != readdata[i][0]:
            print "time mismatch index",i
            break
        if randomdata[i][1] != readdata[i][1]:
            print "value mismatch index",i
            break
    else:
        print "lists match"
    #delete middle 1/3 of data
    st = randomdata[len(randomdata)/3][0]
    et = randomdata[2*len(randomdata)/3][0]
    (status, rv) = yield db.deleteRange(UID, st, et)
    #also delete it from our data
    ndat = randomdata[0:len(randomdata)/3] #exlusive
    ndat += randomdata[2*len(randomdata)/3:] #inclusive

    readdata = []
    print "reading data AFTER DELETE"
    for i in xrange(TOTALPOINTS/PERINSERT):
        (status, rv) = yield db.queryStandardValues(UID, i*INTERVAL*PERINSERT, (i+1)*INTERVAL*PERINSERT)
        (version, values) = rv
        readdata += [(v.time, v.value) for v in values]
    print "len readdata:",len(readdata)
    print "len insert:",len(ndat)
    odataskip = randomdata[666664:666668]
    print "odataskip:",odataskip
    for i in xrange(len(ndat)):
        if ndat[i][0] != readdata[i][0]:
            print "time mismatch index",i
            break
        if ndat[i][1] != readdata[i][1]:
            print "value mismatch index",i
            print "received",readdata[i][1]
            print "expected",ndat[i][1]
            print "nearby expected", ndat[i-2:i+2]
            print "nearby received", readdata[i-2:i+2]
            print "nearby ODAT", randomdata[i-2:i+2]
            break
    else:
        print "lists match"
        setexit(0)
        return

    setexit(1)
    return    

def onFail(param):
    print "Encountered error: ", param
    setexit(2)

def entrypoint():
    print "in entrypoint"
    try:
        q = qdf.quasar.connectToArchiver("localhost", 4410)
        q.addCallback(testbody)
        q.addErrback(onFail)
    except Exception as e:
        print "ex: ",e
        setexit(1)

reactor.callWhenRunning(entrypoint)
reactor.run()
if EXIT_CODE == None:
    EXIT_CODE = 42
if EXIT_CODE != 0:
    sys.exit(EXIT_CODE)
else:
    !rm FAILURE
