#!/usr/bin/env ipython
from multiprocessing import Process, Pipe
import os
import time
import sys
import subprocess
import uuid
import pymongo
%run qci/utils.ipy
runid = getid()
print "RUN ID IS", runid
build_loadgen(10000000,20,1000)
cephpool = "q"+str(runid)
collection = "q"+str(runid)
filestore = "q"+str(runid)
if "CEPHTYPE" not in os.environ or os.environ["CEPHTYPE"] == "local":
    mkceph_local(cephpool)
elif os.environ["CEPHTYPE"] == "remote":
    mkceph_remote(cephpool)
elif os.environ["CEPHTYPE"] == "primary":
    mkceph_primary(cephpool)
elif os.environ["CEPHTYPE"] == "tier":
    mkceph_tier(cephpool)
elif os.environ["CEPHTYPE"] == "filestore":
    cephpool = None

mkconf(cephpool, collection, filestore)

#Create database
rc = subprocess.call(["./exe","-makedb"])
print "rc0", rc
if rc != 0:
    sys.exit(rc)

#start quasar
def start_q_():
    stdout=open("log.q.stdout.%d" % (int(time.time())),"w")
    rc = subprocess.call(["./exe"],stdout=stdout, stderr=subprocess.STDOUT)    
    print "rc1", rc
    if rc != 0:
        sys.exit(rc)


def start_quasar():
    global p
    p = Process(target=start_q_)
    p.start()

def term_quasar():
    #send sigint
    #os.kill(p.pid, 2)
    !pkill --signal 2 exe

    time.sleep(120)
    #os.kill(p.pid, 9)
    !pkill --signal 9 exe

def kill_quasar():
    !pkill --signal 9 exe

def proc_profiles(pfx):
    !go tool pprof -text -cum exe profile.cpu > log.profile.cpu.cum
    !go tool pprof -text exe profile.cpu > log.profile.cpu
    hps = !ls profile.heap.*
    for hp in hps:
        num = hp.split(".")[-1]
        !go tool pprof -text exe $hp > temp
        tot = !cat temp | head -n 1 | cut -d ' ' -f 3
        tot = tot[0]
        fname = "log.heap."+pfx+"."+num+"___"+tot
        !mv temp $fname
    !rm -f profile.heap.*

start_quasar()
#wait a bit
time.sleep(10)

if not p.is_alive():
    print "quasar died:", p.exitcode
    sys.exit(1)

!rm FAILURE
!touch FAILURE
if "TEST_TYPE" not in os.environ or os.environ["TEST_TYPE"] == "loadgen":
    %run qci/test_loadgen.ipy
elif os.environ["TEST_TYPE"] == "readwrite1":
    print "running reqdwrite1"
    %run qci/test_readwrite1.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "readwrite2":
    print "running reqdwrite2"
    %run qci/test_readwrite2.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "readstat1":
    print "running readstat1"
    %run qci/test_readstat1.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "loadgen2":
    print "running loadgen2"
    %run qci/test_loadgen2.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "loadgen3":
    print "running loadgen3"
    %run qci/test_loadgen3.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "endpoint":
    print "running endpoint"
    %run qci/test_endpoint.ipy
    print "run complete"
elif os.environ["TEST_TYPE"] == "changedrange":
    print "running changedrange"
    %run qci/test_changedrange.ipy
    print "run complete"
    
failed = !cat FAILURE; echo $?
failed = (failed[-1] == "0")

if not p.is_alive():
    print "quasar died:", p.exitcode
    sys.exit(1)

if not failed:
    print "WRITING SUCCESS FILE"
    with open("success","w") as f:
        f.write("OK\n")

term_quasar()

proc_profiles("end")

if os.environ["CEPHTYPE"] == "tier":
    delceph_tier(cephpool)
elif os.environ["CEPHTYPE"] == "filestore":
    !rm -r {filestore}
    cl = pymongo.MongoClient()
    cl.drop_database(collection)
    cl.disconnect()
else:
    delceph_pool(cephpool)
    
print "done"

if failed:
    sys.exit(1)

