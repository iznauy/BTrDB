
import qdf
import qdf.quasar
import sys
import random
import uuid
import time
import numpy as np
from twisted.internet import defer, protocol, reactor
print "entered test readwrite1"
EXIT_CODE = None
def setexit(code):
    global EXIT_CODE
    EXIT_CODE = code
    reactor.stop()

def statify(data, pw, starttime, endtime):
    rv = {}
    mask = ~((1<<pw)-1)
    for pr in data:
        time, value = pr
        bucket = time & mask
        if bucket not in rv:
            rv[bucket] = []
        rv[bucket].append(value)
    times = sorted(rv.keys())

    # Here is a statement about starttime and endtime for statistical queries:
    # starttime is inclusive, so is endtime
    rvlist = []
    for t in times:
        _min = min(rv[t])
        _mean = np.mean(rv[t])
        _max = max(rv[t])
        _count = len(rv[t])
        if (starttime & mask) <= t < (endtime & mask):
            rvlist.append([t, _min, _mean, _max, _count])
    return rvlist

@defer.inlineCallbacks
def testbody(db):
    print "connected"
    TOTALPOINTS = 1000000
    PERINSERT = 1000
    INTERVAL = int(1E9/120.)
    ENDTIME = 0 + TOTALPOINTS*INTERVAL

    UID = str(uuid.uuid4())
    data = [(x*INTERVAL, random.random()) for x in xrange(TOTALPOINTS)]
    idx = 0
    # == insert the data
    for i in xrange(TOTALPOINTS/PERINSERT):
        yield db.insertValues(UID, data[idx:idx+PERINSERT])
        idx += PERINSERT
    time.sleep(20)

    def idx_to_time(idx):
        return data[idx][0]

    # == read statistical reps
    for (p_pw, p_st, p_et) in [(22, idx_to_time(100), idx_to_time(TOTALPOINTS*2/3)),
                               (27, idx_to_time(100), idx_to_time(TOTALPOINTS*2/3))]:
        srep = []
        (status, rv) = yield db.queryStatisticalValues(UID, p_st, p_et, p_pw)
        print "status: ", status
        (version, values) = rv
        for v in values:
            srep.append([v.time, v.min, v.mean, v.max, v.count])

        # compare to softcalculated stats
        expected = statify(data, p_pw, p_st, p_et)
        print "p_st:",p_st
        print "p_et:",p_et
        print "len expected: ", len(expected)
        print "len recvd: ", len(srep)
        print "last expected:",expected[-1]
        print "last recvd:",srep[-1]
        if len(srep) != len(expected):
            print "LENGTH MISMATCH"
        for i in xrange(len(expected)):
            if expected[i] != srep[i]:
                print "tuple mismatch at",i
                print "expected:", expected[i]
                print "recvd:", srep[i]
                setexit(1)
                return

    #delete middle 1/3 of data
    st = data[len(data)/3][0]
    et = data[2*len(data)/3][0]
    (status, rv) = yield db.deleteRange(UID, st, et)
    #also delete it from our data
    ndat = data[0:len(data)/3] #exlusive
    ndat += data[2*len(data)/3:] #inclusive
    data = ndat
    print "RUNNING POST-DELETE STAT CHECK"
    # == read statistical reps
    for (p_pw, p_st, p_et) in [(22, idx_to_time(100), idx_to_time(TOTALPOINTS-400000)),
                               (27, idx_to_time(100), idx_to_time(TOTALPOINTS-400000))]:
        srep = []
        (status, rv) = yield db.queryStatisticalValues(UID, p_st, p_et, p_pw)
        print "status: ", status
        (version, values) = rv
        for v in values:
            srep.append([v.time, v.min, v.mean, v.max, v.count])

        # compare to softcalculated stats
        expected = statify(ndat, p_pw, p_st, p_et)
        print "len expected: ", len(expected)
        print "len recvd: ", len(srep)
        if len(srep) != len(expected):
            print "LENGTH MISMATCH"
            setexit(1)
            return
        for i in xrange(len(expected)):
            if expected[i] != srep[i]:
                print "tuple mismatch2 at",i
                print "expected:", expected[i]
                print "recvd:", srep[i]
                setexit(1)
                return

    print "All correct"
    setexit(0)
    return    

def onFail(param):
    print "Encountered error: ", param
    setexit(2)

def entrypoint():
    print "in entrypoint"
    try:
        q = qdf.quasar.connectToArchiver("localhost", 4410)
        q.addCallback(testbody)
        q.addErrback(onFail)
    except Exception as e:
        print "ex: ",e
        setexit(1)

reactor.callWhenRunning(entrypoint)
reactor.run()
if EXIT_CODE == None:
    EXIT_CODE = 42
if EXIT_CODE != 0:
    sys.exit(EXIT_CODE)
else:
    !rm FAILURE
