#!/usr/bin/env python
import pymongo
import uuid
import rados
import sys
import time

if len(sys.argv) != 4:
    print "usage: scrub <pool> <collection> <uuidfile>"
    sys.exit(1)

_client = pymongo.MongoClient()
db = _client[sys.argv[2]].superblocks


uuids = []
#Get target uuids
with open(sys.argv[3],"r") as uf:
    for l in uf.readlines():
        l = l.strip()
        if l.startswith("#") or len(l) == 0:
            continue
        uuids.append(uuid.UUID(l))

#Get all metadata uuids
known_uuids = [uuid.UUID(x) for x in db.distinct("uuid")]
print "There are %d known uuids" % len(known_uuids)

#Get all object names for these uuids
cluster = rados.Rados(conffile="/etc/ceph/ceph.conf")
print "Will attempt to connect to: " + str(cluster.conf_get('mon initial members'))

cluster.connect()
time.sleep(1)
for i in xrange(10):
    try:
        cluster.require_state("connected")
        break
    except rados.RadosStateError as e:
        print e
        print "Not connected yet"
        time.sleep(1)

ioctx = cluster.open_ioctx(sys.argv[1])
obj_iter = ioctx.list_objects()

rogue_uuids = set()
toremove = []
total = 0
for obj in obj_iter:
    if obj.key == "allocator":
        continue
    total += 1
    uid = uuid.UUID(obj.key[:32])
    if uid not in known_uuids:
        rogue_uuids.add(uid)
    if uid in uuids:
        toremove.append(obj.key)
if total != 0:
    print "A total of %d objects matched (%.2f%%)" % (len(toremove), (float(len(toremove))/total)*100)
else:
    print "No objects"
print "There are %d rogue uuids" % len(rogue_uuids)

print "If you wish to continue and delete the quasar objects, type 'yes i really do' exactly"
inp = raw_input(">")
if inp != "yes i really do":
    print "Aborting"
    sys.exit(1)

for key in toremove:
    print "Removing: ",key
    ioctx.remove_object(key)

print "If you wish to continue and delete the metadata, type 'yes I really do' exactly"
inp = raw_input(">")
if inp != "yes I really do":
    print "Aborting"
    sys.exit(1)

for u in uuids:
    print "Removing: ", str(u)
    rv = db.remove({"uuid":str(u)})
    print "OK, %d generations nuked" % rv["n"]

print "Success"
